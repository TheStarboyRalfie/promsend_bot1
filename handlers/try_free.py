from aiogram import Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, KeyboardButton

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.fsm.context import FSMContext

from aiogram.dispatcher.filters import Text
from aiogram import F

from keyboards.keyboard import create_kb, newbie_kb_list, run_free_kb_list, start_kb_list

from filters.filter import ChannelMemberFilter, DBMemberFilter, BadWordsFilter, BannedFilter

from datetime import datetime, timedelta

from db.commands import add_user, get_ad

router = Router()
router.message.filter(F.chat.type.in_({'private'}))
router.message.filter(BannedFilter())

class FreeTryPurchase(StatesGroup):
    text_entering = State()
    data_saving = State()

@router.message(ChannelMemberFilter(), DBMemberFilter(), Text(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ'))
async def try_free_sub(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        '''
–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–∞—Ä–∏—Ñ <b>"1 –¥–µ–Ω—å"</b>
        
üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
        ''',
        reply_markup=create_kb([[KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]])
    )
    await state.set_state(FreeTryPurchase.text_entering)

@router.message(DBMemberFilter(), Text(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ'))
async def try_free(message: Message):
    await message.answer(
        '–ß—Ç–æ–±—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ 1 –¥–µ–Ω—å, –≤–∞–º –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: @promsend',
        reply_markup=create_kb(newbie_kb_list)
    )

@router.message(FreeTryPurchase.text_entering, Text(text='–û—Ç–º–µ–Ω–∞'))
async def purchase_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.reply('‚Ü©Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ <b>"1 –¥–µ–Ω—å"</b> –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=create_kb(newbie_kb_list))

@router.message(BadWordsFilter(), FreeTryPurchase.text_entering)
async def bad_words(message: Message):
    await message.answer('ü§¨ –í –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –±—Ä–∞–Ω—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        
@router.message(FreeTryPurchase.text_entering)
async def data_saving(message: Message, state: FSMContext):
    await state.update_data(user_id=message.from_user.id)
    if message.photo:
        await state.update_data(ad_text=message.caption)
        await state.update_data(ad_photo=message.photo[-1].file_id)
    else:
        await state.update_data(ad_text=message.text)
        await state.update_data(ad_photo='no_photo')
    user_data = await state.get_data()
    ad_photo = user_data.get('ad_photo')
    ad_text = user_data.get('ad_text')
    await message.answer('‚¨áÔ∏è –í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:')
    if ad_photo != 'no_photo':
        await message.answer_photo(photo=ad_photo, caption=ad_text, reply_markup=create_kb(run_free_kb_list))
    else:
        await message.answer(ad_text, reply_markup=create_kb(run_free_kb_list))
    await message.answer('üì§ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?')
    await state.set_state(FreeTryPurchase.data_saving)

@router.message(FreeTryPurchase.data_saving, Text(text='–û—Ç–º–µ–Ω–∞'))
async def purchase_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.reply('‚Ü©Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ <b>"1 –¥–µ–Ω—å"</b> –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=create_kb(newbie_kb_list))

@router.message(FreeTryPurchase.data_saving, Text(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'))
async def distrib_start(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = user_data.get('user_id')
    ad_photo = user_data.get('ad_photo')
    ad_text = user_data.get('ad_text')
    tariff_ends = datetime.now() + timedelta(days=1)
    await add_user(user_id, '1 –¥–µ–Ω—å', tariff_ends, ad_text, ad_photo)
    await state.clear()
    await message.answer('‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É!', reply_markup=create_kb(start_kb_list))
    
    