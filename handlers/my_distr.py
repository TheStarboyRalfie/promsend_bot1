from aiogram import Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, KeyboardButton

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.fsm.context import FSMContext

from aiogram.dispatcher.filters import Text
from aiogram import F

from keyboards.keyboard import create_kb, newbie_kb_list, start_kb_list, my_distr_kb_kist, no_ad_kb_list
from keyboards.inline_kbs import create_ikb

from filters.filter import ChannelMemberFilter, DBMemberFilter, BadWordsFilter, BannedFilter

from db.commands import check_user, get_ad, update_ad, get_tariff_info

router = Router()
router.message.filter(F.chat.type.in_({'private'}))
router.message.filter(BannedFilter())

class AdChangig(StatesGroup):
    start = State()
    new_ad_sending = State()

class AdCreating(StatesGroup):
    start = State()
    text_entering = State()

@router.message(Text(text='–ú–æ—è —Ä–∞—Å—Å—ã–ª–∫–∞'))
async def my_distr(message: Message, state: FSMContext):
    user = await check_user(message.from_user.id)
    if user == True:
        user_ad = await get_ad(message.from_user.id)
        if user_ad['ad_text'] != 'no_text':
            if user_ad['tariff'] != 'no_tariff':
                await message.answer('‚¨áÔ∏è –í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:')
                if user_ad['ad_photo'] == 'no_photo':
                    await message.answer(f'{user_ad["ad_text"]}', reply_markup=create_kb(my_distr_kb_kist))
                    await state.set_state(AdChangig.start)
                else:
                    await message.answer_photo(user_ad['ad_photo'], f'{user_ad["ad_text"]}', reply_markup=create_kb(my_distr_kb_kist))
                    await state.set_state(AdChangig.start)
            else:
                await message.answer('‚ùóÔ∏è –í–∞—à —Ç–∞—Ä–∏—Ñ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ª—é–±–æ–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞–º —Ç–∞—Ä–∏—Ñ –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>"–¢–∞—Ä–∏—Ñ—ã"</b>')
                await message.answer('‚¨áÔ∏è –í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–µ–ª–æ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:')
                if user_ad['ad_photo'] == 'no_photo':
                    await message.answer(f'{user_ad["ad_text"]}')
                else:
                    await message.answer_photo(user_ad['ad_photo'], f'{user_ad["ad_text"]}')
        elif user_ad['ad_text'] == 'no_text' and user_ad['tariff'] == 'no_tariff':
            await message.answer('‚ùóÔ∏è –í–∞—à —Ç–∞—Ä–∏—Ñ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ª—é–±–æ–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞–º —Ç–∞—Ä–∏—Ñ –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>"–¢–∞—Ä–∏—Ñ—ã"</b>')
        elif user_ad['ad_text'] == 'no_text':
            await message.answer('‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ', reply_markup=create_kb(no_ad_kb_list))
            await state.set_state(AdCreating.start)
    else:
        await message.answer(
                '''
–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞–º —Ç–∞—Ä–∏—Ñ –≤–æ –≤–∫–ª–∞–¥–∫–µ <b>"–¢–∞—Ä–∏—Ñ—ã"</b>

<b>‚ùóÔ∏è –ï—Å–ª–∏ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –≤–ø–µ—Ä–≤—ã–µ, —Ç–æ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å 1 –¥–µ–Ω—å —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –î–ª—è —ç—Ç–æ–≥–æ –í–∞–º –≤—Å–µ–≥–æ –ª–∏—à—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª ‚Äú–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ‚Äù –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª. –ö—Å—Ç–∞—Ç–∏, —Ç–∞–º –º—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–∞ —Å–∫–∏–¥–∫—É –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.</b>
                ''', 
                reply_markup=create_kb(newbie_kb_list)
                )

@router.message(AdChangig.start, Text(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def to_main_menu_cmd(message: Message, state: FSMContext):
    await state.clear()
    user = await check_user(user_id=message.from_user.id)
    if user == True:
        await message.reply('‚Ü©Ô∏è –í–æ–∑–≤–∞—Ä—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=create_kb(start_kb_list))
    else:
        await message.reply('‚Ü©Ô∏è –í–æ–∑–≤–∞—Ä—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=create_kb(newbie_kb_list))

@router.message(AdChangig.start, Text(text='–ú–æ–π —Ç–∞—Ä–∏—Ñ'))
async def display_tariff(message: Message):
    tariff_info = await get_tariff_info(message.from_user.id)
    await message.answer(f'''üè∑ –í–∞—à –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ: <b>"{tariff_info['tariff']}"</b>\n\nüìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {tariff_info['tariff_ends'].strftime("%d.%m.%Y")}''')

@router.message(AdChangig.start, Text(text='–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'))
async def ad_updating(message: Message, state: FSMContext):
    await message.answer('üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', reply_markup=create_kb([[KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]]))
    await state.set_state(AdChangig.new_ad_sending)

@router.message(AdChangig.new_ad_sending, Text(text='–û—Ç–º–µ–Ω–∞'))
async def updating_cancel(message: Message, state: FSMContext):
    await state.set_state(AdChangig.start)
    await message.reply('‚Ü©Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=create_kb(my_distr_kb_kist))

@router.message(BadWordsFilter(), AdChangig.new_ad_sending)
async def bad_words(message: Message):
    await message.answer('ü§¨ –í –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –±—Ä–∞–Ω—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')    

@router.message(AdChangig.new_ad_sending)
async def new_ad(message: Message, state: FSMContext):
    if message.photo:
        await update_ad(user_id=message.from_user.id, ad_text=message.caption, ad_photo=message.photo[-1].file_id)
    else:
        await update_ad(user_id=message.from_user.id, ad_text=message.text, ad_photo='no_photo')
    await state.set_state(AdChangig.start)
    await message.answer('‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n‚¨á –¢–µ–ø–µ—Ä—å –æ–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:', reply_markup=create_kb(my_distr_kb_kist))
    user_ad = await get_ad(message.from_user.id)
    if user_ad['ad_photo'] == 'no_photo':
        await message.answer(f"{user_ad['ad_text']}")
    else:
        await message.answer_photo(user_ad['ad_photo'], f"{user_ad['ad_text']}")

@router.message(AdChangig.start, Text(text='–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'))
async def delete_ad(message: Message, state: FSMContext):
    await message.answer(
        '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ? –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ–Ω–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è', 
        reply_markup=create_kb([[KeyboardButton(text='–í—Å—ë —Ä–∞–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å')], [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]])
        )

@router.message(AdChangig.start, Text(text='–û—Ç–º–µ–Ω–∞'))
async def deleting_cancel(message: Message, state: FSMContext):
    await state.set_state(AdChangig.start)
    await message.reply('‚Ü©Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=create_kb(my_distr_kb_kist))

@router.message(AdChangig.start, Text(text='–í—Å—ë —Ä–∞–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å'))
async def ad_deleting(message: Message, state: FSMContext):
    await update_ad(message.from_user.id, 'no_text', 'no_photo')
    await state.set_state(AdCreating.start)
    await message.answer('‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!', reply_markup=create_kb(no_ad_kb_list))
    
@router.message(AdCreating.start, Text(text='–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'))
async def create_ad(message: Message, state: FSMContext):
    await message.answer('üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', reply_markup=create_kb([[KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]]))
    await state.set_state(AdCreating.text_entering)

@router.message(AdCreating.start, Text(text='–ú–æ–π —Ç–∞—Ä–∏—Ñ'))
async def display_tariff(message: Message):
    tariff_info = await get_tariff_info(message.from_user.id)
    await message.answer(f'''üè∑ –í–∞—à –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ: <b>"{tariff_info['tariff']}"</b>\n\nüìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞: {tariff_info['tariff_ends'].strftime("%d.%m.%Y")}''')
    
@router.message(AdCreating.start, Text(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def to_main_menu_cmd(message: Message, state: FSMContext):
    await state.clear()
    user = await check_user(user_id=message.from_user.id)
    if user == True:
        await message.reply('‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=create_kb(start_kb_list))
    else:
        await message.reply('‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=create_kb(newbie_kb_list))

@router.message(AdCreating.text_entering, Text(text='–û—Ç–º–µ–Ω–∞'))
async def creating_cancel(message: Message, state: FSMContext):
    await state.set_state(AdCreating.start)
    await message.reply('‚Ü©Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=create_kb(no_ad_kb_list))        

@router.message(BadWordsFilter(), AdCreating.text_entering)
async def bad_words(message: Message):
    await message.answer('ü§¨ –í –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –±—Ä–∞–Ω—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

@router.message(AdCreating.text_entering)
async def new_ad(message: Message, state: FSMContext):
    if message.photo:
        await update_ad(user_id=message.from_user.id, ad_text=message.caption, ad_photo=message.photo[-1].file_id)
    else:
        await update_ad(user_id=message.from_user.id, ad_text=message.text, ad_photo='no_photo')
    await state.set_state(AdChangig.start)
    await message.answer('‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n‚¨á –¢–µ–ø–µ—Ä—å –æ–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:', reply_markup=create_kb(my_distr_kb_kist))
    user_ad = await get_ad(message.from_user.id)
    if user_ad['ad_photo'] == 'no_photo':
        await message.answer(f"{user_ad['ad_text']}")
    else:
        await message.answer_photo(user_ad['ad_photo'], f"{user_ad['ad_text']}")
