import asyncio

from aiogram import Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, KeyboardButton

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.fsm.context import FSMContext

from aiogram.dispatcher.filters import Command, Text
from aiogram import F

from keyboards.keyboard import create_kb, newbie_kb_list, start_kb_list, tariffs_kb_list, tariff_kb_list, promo_kb_list

from filters.filter import PromocodeFilter, TariffFilter, DBMemberFilter, BadWordsFilter, BannedFilter

from db.commands import check_user, get_promos, get_ad, add_user, add_existing_user

from datetime import datetime, timedelta

tariffs_dict = {
    '1 –¥–µ–Ω—å':
        ''' 
<b>–¢–∞—Ä–∏—Ñ "1 –¥–µ–Ω—å"</b>

–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º 7200 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º–æ–π –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤.

<b>–¶–µ–Ω–∞ ‚Äî 99‚ÇΩ</b>
        ''',
    '3 –¥–Ω—è':
        '''
<b>–¢–∞—Ä–∏—Ñ "3 –¥–Ω—è"</b>

–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º 21600 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º–æ–π –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 –¥–Ω–µ–π.

<b>–¶–µ–Ω–∞ ‚Äî 199‚ÇΩ</b>
        ''',
    '7 –¥–Ω–µ–π':
        '''
<b>–¢–∞—Ä–∏—Ñ "7 –¥–Ω–µ–π"</b>

–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º 50400 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º–æ–π –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π.

<b>–¶–µ–Ω–∞ ‚Äî 399‚ÇΩ</b>
        ''',
    '30 –¥–Ω–µ–π':
        '''
<b>–¢–∞—Ä–∏—Ñ "30 –¥–Ω–µ–π"</b>

–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º 216000 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º–æ–π –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 –¥–Ω–µ–π.

<b>–¶–µ–Ω–∞ ‚Äî 1299‚ÇΩ</b>
        '''
}

tariffs_days_dict = {
    '1 –¥–µ–Ω—å': 1,
    '3 –¥–Ω—è': 3,
    '7 –¥–Ω–µ–π': 7,
    '30 –¥–Ω–µ–π': 30
}



router = Router()
router.message.filter(F.chat.type.in_({'private'}))
router.message.filter(BannedFilter())

class TariffPurchase(StatesGroup):
    tariff_choosing = State()
    text_entering = State()
    promo_entering = State()
    data_saving = State()

@router.message(Text(text='–¢–∞—Ä–∏—Ñ—ã'))
async def tariffs_cmd(message: Message, state: FSMContext):
    await state.set_data({})
    user = await check_user(user_id=message.from_user.id)
    if user == False:
        await message.answer(
           f'''
    ‚ùóÔ∏è –ï—Å–ª–∏ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º, —Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ –¥–µ–Ω—å! –¢–µ–±–µ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: @promsend
            '''
        )
    await message.answer('–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:', reply_markup=create_kb(tariffs_kb_list))
    await state.set_state(TariffPurchase.tariff_choosing)


@router.message(TariffPurchase.tariff_choosing, Text(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def to_main_menu_cmd(message: Message, state: FSMContext):
    await state.clear()
    user = await check_user(user_id=message.from_user.id)
    if user == True:
        await message.reply('‚Ü©Ô∏è –í–æ–∑–≤–∞—Ä—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=create_kb(start_kb_list))
    else:
        await message.reply('‚Ü©Ô∏è –í–æ–∑–≤–∞—Ä—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=create_kb(newbie_kb_list))

@router.message(TariffPurchase.tariff_choosing, Text(text='–í –º–µ–Ω—é'))
async def to_tariffs_menu_cmd(message: Message, state: FSMContext):
    await state.set_data({})
    await state.set_state(TariffPurchase.tariff_choosing)
    await message.reply('‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞—é –º–µ–Ω—é', reply_markup=create_kb(tariffs_kb_list))

@router.message(TariffPurchase.tariff_choosing, F.text.in_(tariffs_dict))
async def tariff(message: Message, state: FSMContext):
    await state.update_data(tariff=message.text)
    tariff_info = tariffs_dict.get(message.text)
    await message.answer(f'{tariff_info}', reply_markup=create_kb(tariff_kb_list))

@router.message(TariffFilter(), TariffPurchase.tariff_choosing, Text(text='–ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ'))
async def tariff_rejection(message: Message, state: FSMContext):
    await message.answer('üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è', reply_markup=create_kb(tariffs_kb_list))

@router.message(TariffPurchase.tariff_choosing, Text(text='–ö—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ'))
async def tariff_purchase(message: Message, state: FSMContext):
    user_data = await state.get_data()
    tariff = user_data.get('tariff')
    await message.answer(
        f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ <b>"{tariff}"</b>.\n\nüìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', 
        reply_markup=create_kb([[KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]])
        )
    await state.set_state(TariffPurchase.text_entering)

@router.message(TariffPurchase.text_entering, Text(text='–û—Ç–º–µ–Ω–∞'))
async def purchase_cancel(message: Message, state: FSMContext):
    await state.set_data({})
    await state.set_state(TariffPurchase.tariff_choosing)
    await message.reply('‚Ü©Ô∏è –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=create_kb(tariffs_kb_list))

@router.message(BadWordsFilter(), TariffPurchase.text_entering)
async def bad_words(message: Message):
    await message.answer('ü§¨ –í –≤–∞—à–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –±—Ä–∞–Ω—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

@router.message(TariffPurchase.text_entering)
async def data_saving(message: Message, state: FSMContext):
    await state.update_data(user_id=message.from_user.id)
    if message.photo:
        await state.update_data(ad_text=message.caption)
        await state.update_data(ad_photo=message.photo[-1].file_id)
    else:
        await state.update_data(ad_text=message.text)
        await state.update_data(ad_photo='no_photo')
    user_data = await state.get_data()
    ad_photo = user_data.get('ad_photo')
    ad_text = user_data.get('ad_text')
    await message.answer('‚¨áÔ∏è –¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:')
    if ad_photo != 'no_photo':
        await message.answer_photo(photo=ad_photo, caption=ad_text)
    else:
        await message.answer(ad_text)
    await message.answer('üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –µ—Å—Ç—å:', reply_markup=create_kb(promo_kb_list))
    await state.set_state(TariffPurchase.promo_entering)
    
@router.message(PromocodeFilter(), TariffPurchase.promo_entering)
async def with_promo(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!')
    user_data = await state.get_data()
    user_id = message.from_user.id
    ad_photo = user_data.get('ad_photo')
    ad_text = user_data.get('ad_text')
    tariff = user_data.get('tariff')
    tariff_ends = datetime.now() + timedelta(days=tariffs_days_dict.get(tariff))
    user = await check_user(user_id=message.from_user.id)
    if user == True:
        await add_existing_user(user_id, tariff, tariff_ends, ad_text, ad_photo)
    else:
        await add_user(user_id, tariff, tariff_ends, ad_text, ad_photo)
    await state.clear()
    await message.answer('‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É!', reply_markup=create_kb(start_kb_list))

@router.message(TariffPurchase.promo_entering, Text(text='–û—Ç–º–µ–Ω–∞'))
async def promo_cancel(message: Message, state: FSMContext):
    await state.set_data({})
    await state.set_state(TariffPurchase.tariff_choosing)
    await message.reply('‚Ü©Ô∏è –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=create_kb(tariffs_kb_list))

@router.message(TariffPurchase.promo_entering, Text(text='–ö—É–ø–∏—Ç—å –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞'))
async def without_promo(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    ad_photo = user_data.get('ad_photo')
    ad_text = user_data.get('ad_text')
    tariff = user_data.get('tariff')
    tariff_ends = datetime.now() + timedelta(days=tariffs_days_dict.get(tariff))
    user = await check_user(user_id=message.from_user.id)
    if user == True:
        await add_existing_user(user_id, tariff, tariff_ends, ad_text, ad_photo)
    else:
        await add_user(user_id, tariff, tariff_ends, ad_text, ad_photo)
    await state.clear()
    await message.answer('‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É!', reply_markup=create_kb(start_kb_list))